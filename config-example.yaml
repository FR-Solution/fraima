- apiVersion: fraima.io/v1alpha
  kind: Containerd
  spec:
    service:
      extraArgs:
        # This document provides the description of the CRI plugin configuration. 
        # The CRI plugin config is part of the containerd config
        # Default: /etc/containerd/config.toml
        config: /etc/kubernetes/containerd/config.toml
    configuration:
      extraArgs:
        version: 2
        plugins:
          io.containerd.grpc.v1.cri:
            containerd:
              runtimes:
                runc:
                  # Runtime v2 introduces a first class shim API for runtime authors to integrate with containerd. 
                  # The shim API is minimal and scoped to the execution lifecycle of a container.
                  runtime_type: "io.containerd.runc.v2"
                  options:
                    # While containerd and Kubernetes use the legacy cgroupfs driver for managing cgroups by default, 
                    # it is recommended to use the systemd driver on systemd-based hosts for compliance of the "single-writer" rule of cgroups. 
                    # To configure containerd to use the systemd driver, set the following option:
                    SystemdCgroup: true
    downloading:
      - name: cotainerd
        src: https://github.com/containerd/containerd/releases/download/v1.6.6/containerd-1.6.6-linux-amd64.tar.gz
        checkSum:
          src: https://github.com/containerd/containerd/releases/download/v1.6.6/containerd-1.6.6-linux-amd64.tar.gz.sha256sum
          type: "sha256"
        path: /usr/bin/
        owner: root:root
        permission: 0645
        unzip:
          status: true
          files: 
            - bin/containerd
            - bin/containerd-shim
            - bin/containerd-shim-runc-v1
            - bin/containerd-shim-runc-v2
            - bin/containerd-stress
            - bin/ctr

      - name: runc
        src: https://github.com/opencontainers/runc/releases/download/v1.1.3/runc.amd64
        path: /usr/bin/
        owner: root:root
        permission: 0645
    starting:
      - systemctl enable containerd
      - systemctl start containerd

F
- apiVersion: fraima.io/v1alpha
  kind: Kubelet
  spec:
    service:
      extraArgs:
        # Number for the log level verbosity
        v: 2
        # The directory where the TLS certs are located. 
        # If --tls-cert-file and --tls-private-key-file are provided, this flag will be ignored.
        # Default: /var/lib/kubelet/pki
        cert-dir: /etc/kubernetes/pki/certs/kubelet
        # The Kubelet will load its initial configuration from this file. 
        # The path may be absolute or relative; relative paths start at the Kubelet's current working directory. 
        # Omit this flag to use the built-in default configuration values. 
        # Command-line flags override configuration from this file.
        config: /etc/kubernetes/kubelet/config.yaml
        # Path to a kubeconfig file, specifying how to connect to the API server. 
        # Providing --kubeconfig enables API server mode, omitting --kubeconfig enables standalone mode.
        kubeconfig: /etc/kubernetes/kubelet/kubeconfig
        # Path to a kubeconfig file that will be used to get client certificate for kubelet. 
        # If the file specified by --kubeconfig does not exist, 
        # the bootstrap kubeconfig is used to request a client certificate from the API server. 
        # On success, a kubeconfig file referencing the generated client certificate and key is written to the path specified by --kubeconfig. 
        # The client certificate and key file will be stored in the directory pointed by --cert-dir.
        bootstrap-kubeconfig: /etc/kubernetes/kubelet/bootstrap-kubeconfig
        # The endpoint of remote runtime service. Unix Domain Sockets are supported on Linux, 
        # while npipe and tcp endpoints are supported on windows. 
        # Examples: unix:///path/to/runtime.sock, npipe:////./pipe/runtime.
        container-runtime-endpoint: /run/containerd/containerd.sock
        container-runtime: remote
        # Specified image will not be pruned by the image garbage collector. 
        # When container-runtime is set to docker, all containers in each pod will use the network/IPC namespaces from this image. 
        # Other CRI implementations have their own configuration to set this image.
        # Default: registry.k8s.io/pause:3.6
        pod-infra-container-image: k8s.gcr.io/pause:3.6
        # The provider for cloud services. Set to empty string for running with no cloud provider.
        # If set, the cloud provider determines the name of the node (consult cloud provider documentation to determine 
        # if and how the hostname is used). 
        # (DEPRECATED: will be removed in 1.24 or later, in favor of removing cloud provider code from Kubelet.)
        cloud-provider: external
    configuration:
      apiVersion: kubelet.config.k8s.io/v1beta1
      kind: KubeletConfiguration
      registerNode: true

      tlsCertFile: kubelet-server.pem
      tlsPrivateKeyFile: kubelet-server-key.pem

      authentication:
        anonymous:
          enabled: false
        webhook:
          cacheTTL: 0s
          enabled: true
        x509:
          clientCAFile: "kubernetes-ca.pem"
      authorization:
        mode: Webhook
        webhook:
          cacheAuthorizedTTL: 0s
          cacheUnauthorizedTTL: 0s
      cgroupDriver: systemd
      clusterDNS:
        - 29.64.0.10
      clusterDomain: cluster.local
      cpuManagerReconcilePeriod: 0s
      fileCheckFrequency: 0s
      healthzBindAddress: 127.0.0.1
      healthzPort: 10248
      httpCheckFrequency: 0s
      imageMinimumGCAge: 0s
      logging:
        flushFrequency: 0
        options:
          json:
            infoBufferSize: "0"
        verbosity: 0
      memorySwap: {}
      nodeStatusReportFrequency: 1s
      nodeStatusUpdateFrequency: 1s
      resolvConf: /run/systemd/resolve/resolv.conf
      runtimeRequestTimeout: 0s
      shutdownGracePeriod: 15s
      shutdownGracePeriodCriticalPods: 5s
      staticPodPath: "/etc/kubernetes/manifests"
      streamingConnectionIdleTimeout: 0s
      syncFrequency: 0s
      volumeStatsAggPeriod: 0s
      containerLogMaxSize: 50Mi
      maxPods: 250
      kubeAPIQPS: 50
      kubeAPIBurst: 100
      podPidsLimit: 4096
      serializeImagePulls: false
      systemReserved:
        ephemeral-storage: 1Gi
      featureGates:
        RotateKubeletServerCertificate: true
        APIPriorityAndFairness: true
        DownwardAPIHugePages: true
        PodSecurity: true
        CSIMigrationAWS: false
        CSIMigrationAzureFile: false
        CSIMigrationGCE: false
        CSIMigrationvSphere: false
      rotateCertificates: false
      serverTLSBootstrap: true
      tlsMinVersion: VersionTLS12
      tlsCipherSuites:
        - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
        - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
      allowedUnsafeSysctls:
        - "net.core.somaxconn"
      evictionSoft: 
        memory.available: 3Gi 
        nodefs.available: 25%
        nodefs.inodesFree: 15%
        imagefs.available: 30%
        imagefs.inodesFree: 25%
      evictionSoftGracePeriod:  
        memory.available: 2m30s
        nodefs.available: 2m30s
        nodefs.inodesFree: 2m30s
        imagefs.available: 2m30s
        imagefs.inodesFree: 2m30s
      evictionHard:
        memory.available: 2Gi
        nodefs.available: 20%
        nodefs.inodesFree: 10%
        imagefs.available: 25%
        imagefs.inodesFree: 15%
      evictionPressureTransitionPeriod: 5s 
      imageGCHighThresholdPercent: 55
      imageGCLowThresholdPercent: 50

    downloading:
      - name: kubelet
        src: https://dl.k8s.io/release/v1.23.12/bin/linux/amd64/kubelet
        checkSum:
          src: "https://dl.k8s.io/v1.23.12/bin/linux/amd64/kubelet.sha256"
          type: "sha256"
        path: /usr/bin/
        owner: root:root
        permission: 0645
    starting:
      - systemctl enable kubelet
      - systemctl start kubelet

- apiVersion: fraima.io/v1alpha
  kind: Sysctl
  spec:
    configuration:
      extraArgs:
        net.ipv4.ip_forward: 1

- apiVersion: fraima.io/v1alpha
  kind: Modprob
  spec:
    configuration:
      extraArgs:
      - br_netfilter
      - overlay

- apiVersion: fraima.io/v1alpha
  kind: Kubeadm
  spec:
    downloading:
      - name: kubeadm
        src: https://dl.k8s.io/release/v1.23.12/bin/linux/amd64/kubeadm
        checkSum:
          src: "https://dl.k8s.io/v1.23.12/bin/linux/amd64/kubeadm.sha256"
          type: "sha256"
        path: /usr/bin/
        owner: root:root
        permission: 0645

- apiVersion: fraima.io/v1alpha
  kind: Kubectl
  spec:
    downloading:
      - name: kubectl
        src: https://dl.k8s.io/release/v1.23.12/bin/linux/amd64/kubectl
        checkSum:
          src: "https://dl.k8s.io/v1.23.12/bin/linux/amd64/kubectl.sha256"
          type: "sha256"
        path: /usr/bin/
        owner: root:root
        permission: 0645


- apiVersion: fraima.io/v1alpha
  kind: Crictl
  spec:
    downloading:
      - name: crictl
        src: https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.26.0/crictl-v1.26.0-linux-amd64.tar.gz
        path: /usr/bin/
        checkSum:
          src: https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.26.0/crictl-v1.26.0-linux-amd64.tar.gz.sha256
          type: "sha256"
        owner: root:root
        permission: 0645
        unzip:
          status: true
          files: 
            - "crictl"

- apiVersion: fraima.io/v1alpha
  kind: Etcdctl
  spec:
    downloading:
      - name: etcdctl
        src: https://github.com/etcd-io/etcd/releases/download/v3.5.5/etcd-v3.5.5-linux-amd64.tar.gz
        path: /usr/bin/
        owner: root:root
        permission: 0645
        unzip:
          status: true
          files: 
            - "etcd-v3.5.5-linux-amd64/etcdctl"

- apiVersion: fraima.io/v1alpha
  kind: KeyKeeper
  spec:
    downloading:
      - name: key-keeper
        src: "https://storage.yandexcloud.net/m.images/key-keeper-R3?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=YCAJEhOlYpv1GRY7hghCojNX5%2F20230108%2Fru-central1%2Fs3%2Faws4_request&X-Amz-Date=20230108T191931Z&X-Amz-Expires=2592000&X-Amz-Signature=61470EBC0AA7532EA215267A1CDF9E518D37149FAC1FE8417D18840AE2B7F8D9&X-Amz-SignedHeaders=host"
        path: /usr/bin/
        owner: root:root
        permission: 0645
    configuration: {}

- apiVersion: fraima.io/v1alpha
  kind: YandexCloud
  spec:
    downloading:
      - name: yc
        src: "https://storage.yandexcloud.net/yandexcloud-yc/release/0.96.0/linux/amd64/yc"
        path: /usr/bin/
        owner: root:root
        permission: 0645
